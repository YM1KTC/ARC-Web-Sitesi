---
import Layout from '~/layouts/PageLayout.astro';
import { Icon } from 'astro-icon/components';
import HeroText from '~/components/widgets/HeroText.astro';

const metadata = {
  title: 'DMR Contact List Düzenleyici - ARC YM1KTC',
  description:
    'DMR Contact List Düzenleyici ile DMR kullanıcıları için CSV dosyalarını yükleyin, düzenleyin ve dışa aktarın.',
  keywords:
    'DMR, CSV, Düzenleyici, Amatör Radyo, ARC, Amatör Radyocular Derneği, Motorola, Hytera, TYT, Anytone, Baofeng, Radioddity',
};
---

<Layout metadata={metadata}>
  <!-- Alert container for notifications -->
  <div
    id="alertContainer"
    class="fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 z-50 flex flex-col gap-2"
  >
  </div>
  
  <!-- Hero Widget -->
  <HeroText
    tagline="📻 DMR Araçları"
    title="DMR Contact List Düzenleyici"
    subtitle="DMR telsizleriniz için kişi listelerini yükleyin, düzenleyin ve farklı formatlarda dışa aktarın."
  />

  <!-- Main Content Container -->
  <div class="py-8 px-6">
    <div class="max-w-7xl mx-auto space-y-6">
      <!-- File Upload Card -->
      <div
        class="bg-white/80 backdrop-blur-sm rounded-2xl shadow-xl border border-slate-200/50 p-8 hover:shadow-2xl transition-all duration-300"
      >
        <div class="flex items-center space-x-3 mb-6">
          <div class="p-3 bg-gradient-to-r from-blue-500 to-purple-500 rounded-xl text-white">
            <Icon name="tabler:upload" class="w-6 h-6" />
          </div>
          <div>
            <h3 class="text-xl font-semibold text-slate-800">DMR Contact List Yükle</h3>
            <p class="text-sm text-slate-600">CSV formatındaki dosyanızı seçin</p>
          </div>
        </div>
        <input
          type="file"
          id="csvFile"
          class="block w-full text-slate-600 file:mr-4 file:py-3 file:px-6 file:rounded-xl file:border-0 file:text-sm file:font-semibold file:bg-gradient-to-r file:from-blue-50 file:to-purple-50 file:text-blue-700 hover:file:from-blue-100 hover:file:to-purple-100 transition-all duration-200 border-2 border-dashed border-slate-300 rounded-xl p-4 hover:border-blue-400"
        />
      </div>

      <!-- City Filter Card -->
      <div
        class="bg-white/80 backdrop-blur-sm rounded-2xl shadow-xl border border-slate-200/50 p-8 hover:shadow-2xl transition-all duration-300"
      >
        <div class="flex items-center space-x-3 mb-6">
          <div class="p-3 bg-gradient-to-r from-green-500 to-teal-500 rounded-xl text-white">
            <Icon name="tabler:filter" class="w-6 h-6" />
          </div>
          <div>
            <h3 class="text-xl font-semibold text-slate-800">Şehir Filtresi</h3>
            <p class="text-sm text-slate-600">Belirli bir şehre göre filtreleyin</p>
          </div>
        </div>
        <select
          id="cityFilter"
          class="w-full p-3 border-2 border-slate-200 rounded-xl bg-white focus:border-blue-400 focus:ring-2 focus:ring-blue-200 transition-all duration-200"
        >
          <option value="">Tümü</option>
        </select>
      </div>

      <!-- Table Container -->
      <div class="bg-white/80 backdrop-blur-sm rounded-2xl shadow-xl border border-slate-200/50 overflow-hidden">
        <div class="p-6 border-b border-slate-200 bg-gradient-to-r from-slate-50 to-blue-50">
          <h3 class="text-xl font-semibold text-slate-800 flex items-center">
            <Icon name="tabler:table" class="w-6 h-6 mr-2 text-blue-600" />
            DMR Kayıtları Tablosu
          </h3>
        </div>
        <div class="p-6">
          <div class="bg-gradient-to-r from-slate-50/50 to-blue-50/50 rounded-xl p-4 mb-6 backdrop-blur-sm">
            <div class="flex flex-col lg:flex-row lg:items-center lg:justify-between space-y-4 lg:space-y-0">
              <div class="flex items-center space-x-4">
                <div id="csvTable_length" class="flex items-center"></div>
              </div>
              <div class="flex items-center space-x-4">
                <div id="csvTable_filter" class="flex items-center"></div>
              </div>
            </div>
          </div>

          <div class="table-responsive overflow-x-auto rounded-xl shadow-inner">
            <table id="csvTable" class="stripe hover w-full"></table>
          </div>

          <div class="bg-gradient-to-r from-slate-50/50 to-blue-50/50 rounded-xl p-4 mt-6 backdrop-blur-sm">
            <div class="flex flex-col lg:flex-row lg:items-center lg:justify-between space-y-4 lg:space-y-0">
              <div id="csvTable_info" class="flex items-center"></div>
              <div id="csvTable_paginate" class="flex items-center"></div>
            </div>
          </div>
        </div>
      </div>

      <!-- Action Buttons Grid -->
      <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
        <!-- Export Buttons -->
        <div class="col-span-full">
          <h4 class="text-lg font-semibold text-slate-800 mb-4 flex items-center">
            <Icon name="tabler:download" class="w-5 h-5 mr-2 text-blue-600" />
            Dışa Aktarma İşlemleri
          </h4>
        </div>

        <button
          id="exportCsv"
          class="group bg-gradient-to-r from-blue-500 to-blue-600 text-white px-6 py-4 rounded-xl shadow-lg hover:from-blue-600 hover:to-blue-700 hover:shadow-xl transform hover:-translate-y-1 transition-all duration-300 flex items-center justify-center space-x-2"
        >
          <Icon name="tabler:download" class="w-5 h-5" />
          <span class="font-semibold">Anytone CSV</span>
        </button>

        <button
          id="exportTytCsv"
          class="group bg-gradient-to-r from-indigo-500 to-indigo-600 text-white px-6 py-4 rounded-xl shadow-lg hover:from-indigo-600 hover:to-indigo-700 hover:shadow-xl transform hover:-translate-y-1 transition-all duration-300 flex items-center justify-center space-x-2"
        >
          <Icon name="tabler:download" class="w-5 h-5" />
          <span class="font-semibold">TYT CSV</span>
        </button>

        <button
          id="exportTytNoGpsCsv"
          class="group bg-gradient-to-r from-purple-500 to-purple-600 text-white px-6 py-4 rounded-xl shadow-lg hover:from-purple-600 hover:to-purple-700 hover:shadow-xl transform hover:-translate-y-1 transition-all duration-300 flex items-center justify-center space-x-2"
        >
          <Icon name="tabler:download" class="w-5 h-5" />
          <span class="font-semibold">TYT No GPS</span>
        </button>

        <!-- Tools Section -->
        <div class="col-span-full mt-6">
          <h4 class="text-lg font-semibold text-slate-800 mb-4 flex items-center">
            <Icon name="tabler:tools" class="w-5 h-5 mr-2 text-orange-600" />
            Araçlar
          </h4>
        </div>

        <button
          id="filterNonAscii"
          class="group bg-gradient-to-r from-orange-500 to-orange-600 text-white px-6 py-4 rounded-xl shadow-lg hover:from-orange-600 hover:to-orange-700 hover:shadow-xl transform hover:-translate-y-1 transition-all duration-300 flex items-center justify-center space-x-2"
        >
          <Icon name="tabler:alert-triangle" class="w-5 h-5" />
          <span class="font-semibold">Bozuk Karakter</span>
        </button>

        <button
          id="fetchRadioId"
          class="group bg-gradient-to-r from-teal-500 to-teal-600 text-white px-6 py-4 rounded-xl shadow-lg hover:from-teal-600 hover:to-teal-700 hover:shadow-xl transform hover:-translate-y-1 transition-all duration-300 flex items-center justify-center space-x-2"
        >
          <Icon name="tabler:check" class="w-5 h-5" />
          <span class="font-semibold">RadioID.net</span>
        </button>

        <!-- Edit Section -->
        <div class="col-span-full mt-6">
          <h4 class="text-lg font-semibold text-slate-800 mb-4 flex items-center">
            <Icon name="tabler:edit" class="w-5 h-5 mr-2 text-green-600" />
            Düzenleme İşlemleri
          </h4>
        </div>

        <button
          id="addRow"
          class="group bg-gradient-to-r from-green-500 to-green-600 text-white px-6 py-4 rounded-xl shadow-lg hover:from-green-600 hover:to-green-700 hover:shadow-xl transform hover:-translate-y-1 transition-all duration-300 flex items-center justify-center space-x-2"
        >
          <Icon name="tabler:plus" class="w-5 h-5" />
          <span class="font-semibold">Yeni Satır Ekle</span>
        </button>

        <button
          id="removeRow"
          class="group bg-gradient-to-r from-red-500 to-red-600 text-white px-6 py-4 rounded-xl shadow-lg hover:from-red-600 hover:to-red-700 hover:shadow-xl transform hover:-translate-y-1 transition-all duration-300 flex items-center justify-center space-x-2"
        >
          <Icon name="tabler:trash" class="w-5 h-5" />
          <span class="font-semibold">Seçili Satırı Sil</span>
        </button>
      </div>
    </div>
  </div>

  <!-- Enhanced Footer -->
  <footer class="mt-12 mx-6">
    <div
      class="max-w-7xl mx-auto bg-white/80 backdrop-blur-sm shadow-2xl rounded-2xl border border-slate-200/50 overflow-hidden"
    >
      <div class="bg-gradient-to-r from-blue-50 via-purple-50 to-indigo-50 p-8">
        <div class="text-center">
          <h3
            class="text-2xl font-bold bg-gradient-to-r from-blue-600 via-purple-600 to-indigo-600 bg-clip-text text-transparent mb-6"
          >
            ARC - Amatör Radyocular Derneği
          </h3>

          <!-- Social Links -->
          <div class="grid grid-cols-2 md:grid-cols-4 gap-4 mb-8">
            <a
              href="https://t.me/amator_radyocular_dernegi"
              target="_blank"
              class="group flex items-center justify-center space-x-2 bg-white/70 hover:bg-blue-50 p-4 rounded-xl shadow-md hover:shadow-lg transition-all duration-300 transform hover:-translate-y-1"
            >
              <svg class="w-5 h-5 text-blue-500 group-hover:text-blue-600" fill="currentColor" viewBox="0 0 24 24">
                <path
                  d="M12 0C5.374 0 0 5.373 0 12s5.374 12 12 12 12-5.373 12-12S18.626 0 12 0zm5.568 8.16c-.169 1.858-.896 6.728-.896 6.728-.896 6.728-.896 6.728-.896 6.728s-.239 1.987-.239 1.987c-.05.226-.162.332-.332.332-.128 0-.266-.05-.402-.154l-3.402-2.604c-.896-.686-1.653-1.234-2.383-1.653-.226-.129-.402-.315-.402-.587 0-.218.129-.402.315-.508l7.512-6.728c.182-.162.315-.402.315-.651 0-.332-.236-.543-.543-.543-.195 0-.402.089-.573.226L8.427 11.46c-.896.665-1.718 1.266-2.604 1.931-.154.115-.332.182-.52.182-.402 0-.762-.226-.982-.573L2.593 9.867c-.182-.288-.226-.65-.066-.975.162-.332.52-.573.896-.573h14.374c.658 0 1.195.537 1.195 1.195-.001.233-.066.448-.182.646z"
                ></path>
              </svg>
              <span class="font-medium text-slate-700 group-hover:text-blue-600">Telegram</span>
            </a>

            <a
              href="https://instagram.com/ym1ktc"
              target="_blank"
              class="group flex items-center justify-center space-x-2 bg-white/70 hover:bg-pink-50 p-4 rounded-xl shadow-md hover:shadow-lg transition-all duration-300 transform hover:-translate-y-1"
            >
              <svg class="w-5 h-5 text-pink-500 group-hover:text-pink-600" fill="currentColor" viewBox="0 0 24 24">
                <path
                  d="M12 2.163c3.204 0 3.584.012 4.85.07 3.252.148 4.771 1.691 4.919 4.919.058 1.265.069 1.645.069 4.849 0 3.205-.012 3.584-.069 4.849-.149 3.225-1.664 4.771-4.919 4.919-1.266.058-1.644.07-4.85.07-3.204 0-3.584-.012-4.849-.07-3.26-.149-4.771-1.699-4.919-4.92-.058-1.265-.07-1.644-.07-4.849 0-3.204.013-3.583.07-4.849.149-3.227 1.664-4.771 4.919-4.919 1.266-.057 1.645-.069 4.849-.069zm0-2.163c-3.259 0-3.667.014-4.947.072-4.358.2-6.78 2.618-6.98 6.98-.059 1.281-.073 1.689-.073 4.948 0 3.259.014 3.668.072 4.948.2 4.358 2.618 6.78 6.98 6.98 1.281.058 1.689.072 4.948.072 3.259 0 3.668-.014 4.948-.072 4.354-.2 6.782-2.618 6.979-6.98.059-1.28.073-1.689.073-4.948 0-3.259-.014-3.667-.072-4.947-.196-4.354-2.617-6.78-6.979-6.98-1.281-.059-1.69-.073-4.949-.073zm0 5.838c-3.403 0-6.162 2.759-6.162 6.162s2.759 6.163 6.162 6.163 6.162-2.759 6.162-6.163c0-3.403-2.759-6.162-6.162-6.162zm0 10.162c-2.209 0-4-1.79-4-4 0-2.209 1.791-4 4-4s4 1.791 4 4c0 2.21-1.791 4-4 4zm6.406-11.845c-.796 0-1.441.645-1.441 1.44s.645 1.44 1.441 1.44c.795 0 1.439-.645 1.439-1.44s-.644-1.44-1.439-1.44z"
                ></path>
              </svg>
              <span class="font-medium text-slate-700 group-hover:text-pink-600">Instagram</span>
            </a>

            <a
              href="https://www.youtube.com/@YM1KTC"
              target="_blank"
              class="group flex items-center justify-center space-x-2 bg-white/70 hover:bg-red-50 p-4 rounded-xl shadow-md hover:shadow-lg transition-all duration-300 transform hover:-translate-y-1"
            >
              <svg class="w-5 h-5 text-red-500 group-hover:text-red-600" fill="currentColor" viewBox="0 0 24 24">
                <path
                  d="M23.498 6.186a3.016 3.016 0 0 0-2.122-2.136C19.505 3.545 12 3.545 12 3.545s-7.505 0-9.377.505A3.017 3.017 0 0 0 .502 6.186C0 8.07 0 12 0 12s0 3.93.502 5.814a3.016 3.016 0 0 0 2.122 2.136c1.871.505 9.376.505 9.376.505s7.505 0 9.377-.505a3.015 3.015 0 0 0 2.122-2.136C24 15.93 24 12 24 12s0-3.93-.502-5.814zM9.545 15.568V8.432L15.818 12l-6.273 3.568z"
                ></path>
              </svg>
              <span class="font-medium text-slate-700 group-hover:text-red-600">YouTube</span>
            </a>

            <a
              href="https://www.linkedin.com/company/arctr/"
              target="_blank"
              class="group flex items-center justify-center space-x-2 bg-white/70 hover:bg-blue-50 p-4 rounded-xl shadow-md hover:shadow-lg transition-all duration-300 transform hover:-translate-y-1"
            >
              <svg class="w-5 h-5 text-blue-600 group-hover:text-blue-700" fill="currentColor" viewBox="0 0 24 24">
                <path
                  d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"
                ></path>
              </svg>
              <span class="font-medium text-slate-700 group-hover:text-blue-600">LinkedIn</span>
            </a>
          </div>

          <!-- Contact Info -->
          <div
            class="flex flex-col md:flex-row items-center justify-center space-y-2 md:space-y-0 md:space-x-8 text-slate-600"
          >
            <a
              href="mailto:bilgi@radio.org.tr"
              class="flex items-center space-x-2 hover:text-blue-600 transition-colors font-medium"
            >
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"
                ></path>
              </svg>
              <span>bilgi@radio.org.tr</span>
            </a>

            <div class="hidden md:block w-px h-4 bg-slate-300"></div>

            <a
              href="https://radio.org.tr/"
              target="_blank"
              class="flex items-center space-x-2 hover:text-blue-600 transition-colors font-medium"
            >
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9a9 9 0 01-9-9m9 9c1.657 0 3-4.03 3-9s-1.343-9-3-9m0 18c-1.657 0-3-4.03-3-9s1.343-9 3-9m-9 9a9 9 0 019-9"
                ></path>
              </svg>
              <span>radio.org.tr</span>
            </a>
          </div>
        </div>
      </div>
    </div>
  </footer>

  <!-- Loading Overlay -->
  <div class="loading-overlay" id="loadingOverlay">
    <div class="text-center">
      <div class="loading-spinner"></div>
      <p class="mt-4 text-slate-600 font-medium">Yükleniyor...</p>
    </div>
  </div>

  <!-- Enhanced Popup Dialog -->
  <div class="popup-overlay" id="popupOverlay"></div>
  <div class="popup-dialog" id="callsignDialog">
    <span class="popup-close" onclick="(window as any).closePopup?.()">&times;</span>
    <div class="popup-content">
      <h3 class="text-2xl font-bold text-slate-800 mb-6 flex items-center">
        <Icon name="tabler:info-circle" class="w-7 h-7 mr-3 text-blue-600" />
        Çağrı İşareti Detayları
      </h3>
      <div id="callsignContent"></div>
    </div>
  </div>

  <style>
    /* Custom control styling */
    #csvTable_length label,
    #csvTable_filter label {
      @apply flex items-center space-x-2 text-sm font-medium text-slate-700;
    }

    #csvTable_info {
      @apply text-sm text-slate-600 font-medium;
    }

    /* DataTable responsive styling */
    #csvTable {
      @apply w-full border-collapse;
    }

    #csvTable thead th {
      @apply bg-slate-100 text-slate-800 font-semibold px-4 py-3 text-left border-b border-slate-200;
    }

    #csvTable tbody td {
      @apply px-4 py-3 border-b border-slate-100;
    }

    #csvTable tbody tr:hover {
      @apply bg-slate-50;
    }

    #csvTable tbody tr.selected {
      @apply bg-blue-50 border-blue-200;
    }

    /* Input styling within table */
    #csvTable input[type="text"] {
      @apply text-sm border border-slate-200 rounded px-2 py-1 focus:border-blue-400 focus:ring-1 focus:ring-blue-200;
    }

    /* Enhanced Popup Dialog Styles */
    .popup-dialog {
      display: none;
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(20px);
      padding: 0;
      border-radius: 24px;
      box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
      border: 1px solid rgba(148, 163, 184, 0.2);
      z-index: 1000;
      max-width: 1200px;
      width: 95%;
      max-height: 90vh;
      overflow-y: auto;
    }

    .popup-overlay {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: rgba(0, 0, 0, 0.7);
      backdrop-filter: blur(8px);
      z-index: 999;
      animation: fadeIn 0.3s ease-out;
    }

    @keyframes fadeIn {
      from {
        opacity: 0;
      }

      to {
        opacity: 1;
      }
    }

    .popup-close {
      position: absolute;
      right: 20px;
      top: 20px;
      cursor: pointer;
      font-size: 28px;
      color: #64748b;
      z-index: 1001;
      width: 40px;
      height: 40px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      background: rgba(255, 255, 255, 0.9);
      transition: all 0.2s ease;
    }

    .popup-close:hover {
      background: rgba(239, 68, 68, 0.1);
      color: #ef4444;
      transform: scale(1.1);
    }

    .popup-content {
      padding: 32px;
      padding-top: 40px;
    }

    .popup-photo {
      max-width: 250px;
      height: auto;
      margin: 15px 0;
      border-radius: 12px;
      box-shadow: 0 8px 25px -8px rgba(0, 0, 0, 0.3);
    }

    /* Loading state styling */
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: rgba(255, 255, 255, 0.8);
      display: none;
      align-items: center;
      justify-content: center;
      z-index: 9999;
    }

    .loading-spinner {
      width: 50px;
      height: 50px;
      border: 4px solid #e2e8f0;
      border-top: 4px solid #3b82f6;
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }

    @keyframes spin {
      0% {
        transform: rotate(0deg);
      }
      100% {
        transform: rotate(360deg);
      }
    }

    /* Responsive table container */
    .table-responsive {
      overflow-x: auto;
      max-width: 100%;
    }

    @media (max-width: 768px) {
      .popup-dialog {
        width: 98%;
        max-height: 95vh;
      }

      .popup-content {
        padding: 20px;
        padding-top: 50px;
      }

      #csvTable {
        font-size: 0.875rem;
      }

      #csvTable input[type="text"] {
        min-width: 80px;
      }
    }
  </style>

  <script>
    // Import external libraries
    const script1 = document.createElement('script');
    script1.src = 'https://code.jquery.com/jquery-3.6.4.min.js';
    document.head.appendChild(script1);

    const script2 = document.createElement('script');
    script2.src = 'https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js';
    document.head.appendChild(script2);

    const link = document.createElement('link');
    link.rel = 'stylesheet';
    link.href = 'https://cdn.datatables.net/1.13.6/css/jquery.dataTables.min.css';
    document.head.appendChild(link);

    // Wait for libraries to load
    script2.onload = function () {
      initializeDMREditor();
    };

    function initializeDMREditor() {
      // Type definitions
      interface CSVRow {
        No: number | string;
        'Radio ID': string;
        Callsign: string;
        Name: string;
        City: string;
        State?: string;
        Country?: string;
        Remarks?: string;
        'Call Type'?: string;
        'Call Alert'?: string;
        isNew?: boolean;
      }

      // Function to create alert container
      function createAlertContainer(): void {
        const alertContainer = document.createElement('div');
        alertContainer.id = 'alertContainer';
        alertContainer.className =
          'fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 z-50 flex flex-col gap-2';
        document.body.appendChild(alertContainer);
      }

      // Show/hide loading overlay
      function showLoading(): void {
        const overlay = document.getElementById('loadingOverlay');
        if (overlay) overlay.style.display = 'flex';
      }

      function hideLoading(): void {
        const overlay = document.getElementById('loadingOverlay');
        if (overlay) overlay.style.display = 'none';
      }

      // Initialize alert container on page load
      createAlertContainer();

      // Single alert handling function
      function showAlert(message: string, type: 'info' | 'success' | 'warning' | 'error' = 'info'): void {
        const alertContainer = document.getElementById('alertContainer');
        if (!alertContainer) return;

        const alert = document.createElement('div');
        alert.className = `
            max-w-sm w-full
            ${type === 'info' ? 'bg-blue-100 border-blue-400 text-blue-700' : ''}
            ${type === 'success' ? 'bg-green-100 border-green-400 text-green-700' : ''}
            ${type === 'warning' ? 'bg-yellow-100 border-yellow-400 text-yellow-700' : ''}
            ${type === 'error' ? 'bg-red-100 border-red-400 text-red-700' : ''}
            border px-4 py-3 rounded shadow-lg transition-all duration-300
          `;

        alert.innerHTML = `
            <div class="flex justify-between items-start">
              <span class="block flex-grow">${message}</span>
              <button class="ml-4 ${type === 'info' ? 'text-blue-500 hover:text-blue-700' : ''}
                ${type === 'success' ? 'text-green-500 hover:text-green-700' : ''}
                ${type === 'warning' ? 'text-yellow-500 hover:text-yellow-700' : ''}
                ${type === 'error' ? 'text-red-500 hover:text-red-700' : ''}">
                X
              </button>
            </div>
          `;

        alert.querySelector('button')!.addEventListener('click', () => {
          alert.remove();
        });

        alertContainer.appendChild(alert);

        setTimeout(() => {
          if (alert && alert.parentNode) {
            alert.remove();
          }
        }, 5000);
      }

      let table: any;
      let filterNonAscii = false;
      let lastUsedId = 0; // Track the last used ID

      // Function to trim fields over 16 characters
      function trimFields(data: CSVRow[]): CSVRow[] {
        return data.map((row: CSVRow) => {
          Object.keys(row).forEach((key) => {
            if (typeof row[key as keyof CSVRow] === 'string' && (row[key as keyof CSVRow] as string).length > 16) {
              (row[key as keyof CSVRow] as string) = (row[key as keyof CSVRow] as string).substring(0, 16);
            }
          });
          return row;
        });
      }

      // DataTable'ı Başlat
      function initializeTable(data: CSVRow[]): void {
        data = trimFields(data); // Trim fields before initializing the table
        // Find the highest No. value in existing data
        lastUsedId = Math.max(...data.map((row: CSVRow) => parseInt(String(row.No)) || 0));

        // Get unique cities and populate filter dropdown
        const cities = [...new Set(data.map((row: CSVRow) => row.City))].filter((city: string) => city).sort();
        const cityFilter = document.getElementById('cityFilter') as HTMLSelectElement;
        cityFilter.innerHTML =
          '<option value="">Tümü</option>' + cities.map((city) => `<option value="${city}">${city}</option>`).join('');

        const columns = [
          {
            title: 'No.',
            data: 'No',
            orderable: false,
            render: function (data: any, type: string, row: CSVRow) {
              if (type === 'display') {
                return `<input type="checkbox" class="row-select mr-2">${data}`;
              }
              return data;
            },
          },
          { title: 'DMR Radio ID', data: 'Radio ID' },
          { title: 'Çağrı İşareti', data: 'Callsign' },
          { title: 'İsim', data: 'Name' },
          { title: 'Şehir', data: 'City' },
          {
            title: 'İşlem',
            data: null,
            orderable: false,
          },
        ];

        const tableConfig = {
          data: data,
          columns: columns,
          paging: true,
          pageLength: 25,
          searching: true,
          autoWidth: false,
          order: [],
          dom: '<"#csvTable_length"l><"#csvTable_filter"f>rt<"#csvTable_info"i><"#csvTable_paginate"p>',
          rowGroup: {
            enable: false,
            dataSrc: 'City',
            startRender: function (rows: any, group: string) {
              return `<tr class="group">
                          <td colspan="6" class="bg-gray-200 font-bold px-6 py-2">
                            ${group} (${rows.count()} kayıt)
                          </td>
                        </tr>`;
            },
          },
          language: {
            lengthMenu: 'Sayfa başına _MENU_ kayıt göster',
            zeroRecords: 'Kayıt bulunamadı',
            info: 'Toplam _PAGES_ sayfadan _PAGE_. sayfa gösteriliyor',
            infoEmpty: 'Kayıt bulunamadı',
            infoFiltered: '(_MAX_ kayıt içerisinden filtrelendi)',
            search: 'Ara:',
            paginate: {
              first: 'İlk',
              last: 'Son',
              next: 'Sonraki',
              previous: 'Önceki',
            },
          },
          columnDefs: [
            {
              targets: [0, 1, 2, 3, 4], // Specify columns that should have input fields
              render: function (data: any, type: string, row: CSVRow) {
                const bgClass = row.isNew ? 'bg-green-100' : 'bg-gray-50';
                return type === 'display'
                  ? `<input type="text" value="${data || ''}" class="w-full ${bgClass} border rounded p-1">`
                  : data;
              },
            },
            {
              targets: 5, // The magnifier column
              render: function (data: any, type: string, row: CSVRow) {
                if (type === 'display') {
                  const bgClass = row.isNew ? 'bg-green-100' : '';
                  return `
                      <div class="${bgClass} p-1">
                        <a href="#" onclick="(window as any).fetchCallsignDetails?.('${row.Callsign}')" class="text-blue-500 hover:text-blue-700 mr-2" title="SORGULAMA">👀</a>
                        <a href="https://www.kiyiemniyeti.gov.tr/ehizmetler/telsiz_cagri_isareti_sorgula?CallSign=${row.Callsign}" target="_blank" class="text-blue-500 hover:text-blue-700 mr-2" title="KEGM">🔍</a>
                        <a href="https://www.qrz.com/db/${row.Callsign}" target="_blank" class="text-blue-500 hover:text-blue-700" title="QRZ.com">📡</a>
                      </div>
                    `;
                }
                return data;
              },
            },
          ],
        };

        table = ($ as any)('#csvTable').DataTable(tableConfig);

        // Add custom city filtering
        ($ as any)('#cityFilter').on('change', function () {
          const selectedCity = ($ as any)(this).val();
          table.column(4).search(selectedCity).draw();
        });

        // Add row selection handling
        ($ as any)('#csvTable tbody').on('click', 'input.row-select', function (e: Event) {
          e.stopPropagation();
          ($ as any)(this).closest('tr').toggleClass('selected');
        });
      }

      // CSV'yi JSON'a Çevir
      function parseCSV(csv: string): CSVRow[] {
        const lines = csv.split('\n');
        const headers = lines[0].split(',').map((header) => header.trim().replace(/\"/g, ''));
        return lines
          .slice(1)
          .filter((line) => line.trim() !== '') // Filter out empty lines
          .map((line, index) => {
            const fields = line.split(',');
            // Check if all fields are empty
            if (fields.every((field) => !field || field.trim() === '')) {
              return null;
            }
            const obj = headers.reduce(
              (obj, header, i) => {
                obj[header] = fields[i]?.replace(/\"/g, '').trim() || '';
                return obj;
              },
              { No: index + 1 } as any
            );
            obj['Call Type'] = 'Private Call';
            obj['Call Alert'] = 'None';
            return obj;
          })
          .filter((row) => row !== null) // Remove null entries
          .map((row, index) => ({ ...row, No: index + 1 })) // Reindex
          .map((row) => trimFields([row])[0]); // Trim fields
      }

      // DataTable'ı CSV'ye Dışa Aktar
      function exportCSV(): void {
        const data = table
          .rows()
          .data()
          .toArray()
          .map((row: any, index: number) => {
            const rowElement = table.row(index).node();
            const inputs = rowElement.querySelectorAll('input[type="text"]');
            return {
              No: row.No,
              'Radio ID': inputs[0].value,
              Callsign: inputs[1].value,
              Name: inputs[2].value,
              City: inputs[3].value,
              State: '',
              Country: '',
              Remarks: '',
              'Call Type': 'Private Call',
              'Call Alert': 'None',
            };
          });

        const headers = [
          'No.',
          'Radio ID',
          'Callsign',
          'Name',
          'City',
          'State',
          'Country',
          'Remarks',
          'Call Type',
          'Call Alert',
        ];
        let csvContent = headers.map((header) => `"${header}"`).join(',') + '\r\n';

        data.forEach((row: any, index: number) => {
          csvContent +=
            `"${index + 1}",` +
            headers
              .slice(1)
              .map((h) => `"${row[h] || ''}"`)
              .join(',') +
            '\r\n';
        });

        // Son satırdaki yeni satır karakterini kaldır
        csvContent = csvContent.trim();

        // Add one blank line at the end
        csvContent = csvContent + '\r\n';

        const blob = new Blob([csvContent], { type: 'text/csv;charset=us-ascii;' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        const today = new Date();
        const dd = String(today.getDate()).padStart(2, '0');
        const mm = String(today.getMonth() + 1).padStart(2, '0'); // January is 0!
        const yyyy = today.getFullYear();
        a.download = `Anytone-${dd}-${mm}-${yyyy}.csv`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
      }

      // TYT CSV Export Function
      function exportTYTCSV(): void {
        const data = table
          .rows()
          .data()
          .toArray()
          .map((row: any, index: number) => {
            const rowElement = table.row(index).node();
            const inputs = rowElement.querySelectorAll('input[type="text"]');
            const name = `${inputs[1].value} ${inputs[2].value}`; // Combine Callsign and Name
            const radioId = inputs[0].value;
            return `${name},2,${radioId},No`;
          });

        const csvContent = data.join('\r\n') + '\r\n'; // Add newline at the end

        const blob = new Blob([csvContent], { type: 'text/csv;charset=us-ascii;' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        const today = new Date();
        const dd = String(today.getDate()).padStart(2, '0');
        const mm = String(today.getMonth() + 1).padStart(2, '0');
        const yyyy = today.getFullYear();
        a.download = `TYT-${dd}-${mm}-${yyyy}.csv`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        showAlert('TYT formatındaki CSV başarıyla dışa aktarıldı.', 'success');
      }

      // Add TYT No GPS Export Function
      function exportTYTNoGPSCSV(): void {
        const data = table
          .rows()
          .data()
          .toArray()
          .map((row: any, index: number) => {
            const rowElement = table.row(index).node();
            const inputs = rowElement.querySelectorAll('input[type="text"]');
            return {
              RadioID: inputs[0].value,
              CallSign: inputs[1].value,
              Name: inputs[2].value,
              NickName: '', // Changed from inputs[1].value to empty string
              City: inputs[3].value,
              State: '',
              Country: '',
            };
          });

        const headers = ['RadioID', 'CallSign', 'Name', 'NickName', 'City', 'State', 'Country'];
        let csvContent = headers.join(',') + '\r\n';

        data.forEach((row: any) => {
          csvContent += headers.map((header) => `${row[header] || ''}`).join(',') + '\r\n';
        });

        const blob = new Blob([csvContent], { type: 'text/csv;charset=us-ascii;' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        const today = new Date();
        const dd = String(today.getDate()).padStart(2, '0');
        const mm = String(today.getMonth() + 1).padStart(2, '0');
        const yyyy = today.getFullYear();
        a.download = `TYT-NoGPS-${dd}-${mm}-${yyyy}.csv`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        showAlert('TYT GPSsiz formatındaki CSV başarıyla dışa aktarıldı.', 'success');
      }

      // Dosya Yükleme İşlemi
      ($ as any)('#csvFile').on('change', function (e: Event) {
        const file = (e.target as HTMLInputElement).files?.[0];
        if (!file) return;

        const reader = new FileReader();
        reader.onload = function (e) {
          const csvContent = e.target?.result as string;
          const data = parseCSV(csvContent);
          if (table) table.destroy();
          initializeTable(data);
        };
        reader.readAsText(file);
      });

      // CSV Dışa Aktarma Etkinliği
      ($ as any)('#exportCsv').on('click', function () {
        exportCSV();
        showAlert('CSV başarıyla dışa aktarıldı.', 'success');
      });

      // Add TYT Export Button Event Listener
      ($ as any)('#exportTytCsv').on('click', exportTYTCSV);

      // Add event listener for new TYT No GPS Export button
      ($ as any)('#exportTytNoGpsCsv').on('click', exportTYTNoGPSCSV);

      // ASCII Olmayan Filtreyi Aç/Kapat
      ($ as any)('#filterNonAscii').on('click', function () {
        filterNonAscii = !filterNonAscii;
        ($ as any)(this).html(`Bozuk Karakter ${filterNonAscii ? '✅' : '❌'}`);
        table.draw();
        showAlert(`Bozuk karakter filtresi ${filterNonAscii ? 'açıldı' : 'kapandı'}.`, 'info');
      });

      // ASCII Olmayan Karakterler için Özel Arama Fonksiyonu
      ($ as any).fn.dataTable.ext.search.push(function (settings: any, data: string[], dataIndex: number) {
        if (!filterNonAscii) return true;
        return data.some((value) => /[^\x00-\x7F]/.test(value));
      });

      // RadioID.net'ten Türkiye kayıtlarını çekme
      async function fetchTurkishUsers(): Promise<void> {
        try {
          showLoading();
          const response = await fetch('https://radioid.net/api/dmr/user/?country=Turkiye&country=T%C3%BCrkiye');
          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }
          const data = await response.json();

          // Tablonun var olduğundan emin ol
          if (!table) {
            showAlert('Önce bir CSV dosyası yükleyin.', 'warning');
            return;
          }

          // Get Turkish users from API response
          const turkishUsers = data.results;

          // Mevcut tablo verilerini al
          const existingData = table.rows().data().toArray();
          const existingIds = new Set(existingData.map((row: any) => row['Radio ID']));

          // Yeni kayıtları ekle
          const newUsers = turkishUsers.filter((user: any) => !existingIds.has(user.id.toString()));

          if (newUsers.length === 0) {
            showAlert('Eklenecek yeni kayıt bulunamadı.', 'warning');
            return;
          }
          table.draw(); // Tabloyu yeniden çiz

          // Artan ID'leri kullanarak yeni kayıtları oluştur
          const newRecords = newUsers
            .map((user: any) => {
              lastUsedId++; // Increment the ID counter
              return {
                No: lastUsedId,
                'Radio ID': user.id.toString(),
                Callsign: user.callsign,
                Name: user.fname,
                City: user.city || '',
                State: user.state || '',
                Country: '',
                Remarks: user.remarks || '',
                'Call Type': 'Private Call',
                'Call Alert': 'None',
                isNew: true, // Add this property
              };
            })
            .map((row: any) => trimFields([row])[0]); // Trim fields

          // Tabloyu yeniden oluştur
          table.destroy();
          initializeTable([...existingData, ...newRecords]);

          showAlert(
            `${newUsers.length} yeni kayıt eklendi.\nYeni kayıtlar en sonda yeşil renkte belirtilmiştir.`,
            'success'
          );
        } catch (error) {
          console.error('Veri çekme hatası:', error);
          showAlert('Veriler alınırken bir hata oluştu: ' + (error as Error).message, 'error');
        } finally {
          hideLoading();
        }
      }

      // RadioID.net butonu için olay dinleyici
      ($ as any)('#fetchRadioId').on('click', fetchTurkishUsers);

      // Yeni satır ekleme işlevi
      function addNewRow(): void {
        lastUsedId++;
        const newRow = {
          No: lastUsedId,
          'Radio ID': '',
          Callsign: '',
          Name: '',
          City: '',
          State: '',
          Country: '',
          Remarks: '',
          'Call Type': 'Private Call',
          'Call Alert': 'None',
        };

        table.row.add(trimFields([newRow])[0]).draw(); // Trim fields
      }

      // Seçili satırları kaldırma işlevi
      function removeSelectedRows(): void {
        const selectedRows = table.rows('.selected');
        if (selectedRows.count() === 0) {
          showAlert('Lütfen silinecek satırı seçin', 'warning');
          return;
        }

        if (confirm(`${selectedRows.count()} satır silinecek. Emin misiniz?`)) {
          selectedRows.remove().draw();
          showAlert(`${selectedRows.count()} satır silindi.`, 'success');
        }
      }

      // Yeni butonlar için olay dinleyicileri ekle
      ($ as any)('#addRow').on('click', addNewRow);
      ($ as any)('#removeRow').on('click', removeSelectedRows);

      // Add these new functions for popup handling
      (window as any).showPopup = function (): void {
        const overlay = document.getElementById('popupOverlay');
        const dialog = document.getElementById('callsignDialog');
        if (overlay) overlay.style.display = 'block';
        if (dialog) dialog.style.display = 'block';
      };

      (window as any).closePopup = function (): void {
        const overlay = document.getElementById('popupOverlay');
        const dialog = document.getElementById('callsignDialog');
        if (overlay) overlay.style.display = 'none';
        if (dialog) dialog.style.display = 'none';
      };

      (window as any).fetchCallsignDetails = async function (callsign: string): Promise<void> {
        try {
          // Create loading state in popup
          const content = document.getElementById('callsignContent');
          if (content) {
            content.innerHTML =
              '<div class="text-center"><div class="animate-spin inline-block w-8 h-8 border-4 border-blue-500 border-t-transparent rounded-full"></div><p class="mt-2">Yükleniyor...</p></div>';
          }
          (window as any).showPopup();

          // Fetch both APIs in parallel
          const [tacallbookResponse, qrzResponse] = await Promise.all([
            fetch(`https://tacallbook.bugra.workers.dev/${callsign}`),
            fetch(`https://qrz.bugra.workers.dev/qrz/${callsign}`),
          ]);

          const tacallbookData = await tacallbookResponse.json();
          const qrzData = await qrzResponse.json();

          // Combine and display the data
          if (content) {
            content.innerHTML = `
              <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div class="bg-blue-50 p-4 rounded-lg h-full">
                  <h4 class="text-lg font-bold mb-3">🇹🇷 TACALLBOOK Bilgileri</h4>
                  <div class="grid grid-cols-2 gap-2">
                    <div class="font-bold">Çağrı İşareti:</div><div>${tacallbookData.isaret || '-'}</div>
                    <div class="font-bold">İsim:</div><div>${tacallbookData.isim || '-'}</div>
                    <div class="font-bold">Adres:</div><div>${tacallbookData.adres || ''} ${
                      tacallbookData.adres2 || ''
                    }</div>
                    ${tacallbookData.cep ? `<div class="font-bold">Telefon:</div><div>${tacallbookData.cep}</div>` : ''}
                    ${
                      tacallbookData.eskiIsaret
                        ? `<div class="font-bold">Eski Çağrı İşareti:</div><div>${tacallbookData.eskiIsaret}</div>`
                        : ''
                    }
                  </div>
                  ${
                    tacallbookData.photo
                      ? `<img src="${tacallbookData.photo}" class="popup-photo mt-4 mx-auto" alt="Operator Photo">`
                      : ''
                  }
                </div>

                <div class="bg-purple-50 p-4 rounded-lg h-full">
                  <h4 class="text-lg font-bold mb-3">🌍 QRZ.com Bilgileri</h4>
                  <div class="grid grid-cols-2 gap-2">
                    <div class="font-bold">Çağrı İşareti:</div><div>${qrzData.call || '-'}</div>
                    <div class="font-bold">İsim:</div><div>${qrzData.fname || ''} ${qrzData.name || ''}</div>
                    <div class="font-bold">Adres:</div><div>${qrzData.addr1 || ''} ${qrzData.addr2 || ''}</div>
                    <div class="font-bold">Ülke:</div><div>${qrzData.country || '-'}</div>
                    <div class="font-bold">Grid:</div><div>${qrzData.grid || '-'}</div>
                    ${qrzData.class ? `<div class="font-bold">Lisans:</div><div>${qrzData.class}</div>` : ''}
                  </div>
                  ${
                    qrzData.image ? `<img src="${qrzData.image}" class="popup-photo mt-4 mx-auto" alt="QRZ Photo">` : ''
                  }
                </div>
              </div>
            `;
          }
        } catch (error) {
          console.error('API Error:', error);
          showAlert('Çağrı işareti bilgileri alınamadı: ' + (error as Error).message, 'error');
        }
      };

      // Add click handler for popup overlay
      const popupOverlay = document.getElementById('popupOverlay');
      if (popupOverlay) {
        popupOverlay.onclick = (window as any).closePopup;
      }
    }
  </script>
</Layout>